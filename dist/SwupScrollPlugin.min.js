"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function t(e, n) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && (typeof module === "undefined" ? "undefined" : _typeof(module)) === "object") module.exports = n();else if (typeof define === "function" && define.amd) define([], n);else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") exports["SwupScrollPlugin"] = n();else e["SwupScrollPlugin"] = n();
})(window, function () {
  return function (t) {
    var e = {};

    function n(o) {
      if (e[o]) {
        return e[o].exports;
      }

      var i = e[o] = {
        i: o,
        l: false,
        exports: {}
      };
      t[o].call(i.exports, i, i.exports, n);
      i.l = true;
      return i.exports;
    }

    n.m = t;
    n.c = e;

    n.d = function (t, e, o) {
      if (!n.o(t, e)) {
        Object.defineProperty(t, e, {
          enumerable: true,
          get: o
        });
      }
    };

    n.r = function (t) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(t, Symbol.toStringTag, {
          value: "Module"
        });
      }

      Object.defineProperty(t, "__esModule", {
        value: true
      });
    };

    n.t = function (t, e) {
      if (e & 1) t = n(t);
      if (e & 8) return t;
      if (e & 4 && _typeof(t) === "object" && t && t.__esModule) return t;
      var o = Object.create(null);
      n.r(o);
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: t
      });
      if (e & 2 && typeof t != "string") for (var i in t) {
        n.d(o, i, function (e) {
          return t[e];
        }.bind(null, i));
      }
      return o;
    };

    n.n = function (t) {
      var e = t && t.__esModule ? function e() {
        return t["default"];
      } : function e() {
        return t;
      };
      n.d(e, "a", e);
      return e;
    };

    n.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    };

    n.p = "";
    return n(n.s = 0);
  }([function (t, e, n) {
    "use strict";

    var o = n(1);
    var i = r(o);

    function r(t) {
      return t && t.__esModule ? t : {
        "default": t
      };
    }

    t.exports = i["default"];
  }, function (t, e, n) {
    "use strict";

    Object.defineProperty(e, "__esModule", {
      value: true
    });

    var o = Object.assign || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];

        for (var o in n) {
          if (Object.prototype.hasOwnProperty.call(n, o)) {
            t[o] = n[o];
          }
        }
      }

      return t;
    };

    var i = function () {
      function t(t, e) {
        for (var n = 0; n < e.length; n++) {
          var o = e[n];
          o.enumerable = o.enumerable || false;
          o.configurable = true;
          if ("value" in o) o.writable = true;
          Object.defineProperty(t, o.key, o);
        }
      }

      return function (e, n, o) {
        if (n) t(e.prototype, n);
        if (o) t(e, o);
        return e;
      };
    }();

    var r = n(2);
    var l = u(r);
    var a = n(3);
    var s = u(a);

    function u(t) {
      return t && t.__esModule ? t : {
        "default": t
      };
    }

    function c(t, e) {
      if (!(t instanceof e)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function f(t, e) {
      if (!t) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return e && (_typeof(e) === "object" || typeof e === "function") ? e : t;
    }

    function p(t, e) {
      if (typeof e !== "function" && e !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + _typeof(e));
      }

      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (e) Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e;
    }

    var d = function (t) {
      p(e, t);

      function e(t) {
        c(this, e);
        var n = f(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
        n.name = "ScrollPlugin";

        n.onSamePage = function () {
          n.swup.scrollTo(0);
        };

        n.onSamePageWithHash = function (t) {
          var e = t.delegateTarget;
          var o = document.querySelector(e.hash);
          var i = o.getBoundingClientRect().top + window.pageYOffset;
          n.swup.scrollTo(i);
        };

        n.onTransitionStart = function (t) {
          if (n.options.doScrollingRightAway && !n.swup.scrollToElement) {
            n.doScrolling(t);
          }
        };

        n.onContentReplaced = function (t) {
          if (!n.options.doScrollingRightAway || n.swup.scrollToElement) {
            n.doScrolling(t);
          }
        };

        n.doScrolling = function (t) {
          var e = n.swup;

          if (!t || e.options.animateHistoryBrowsing) {
            if (e.scrollToElement != null) {
              var o = document.querySelector(e.scrollToElement);

              if (o != null) {
                var i = o.getBoundingClientRect().top + window.pageYOffset;
                e.scrollTo(i);
              } else {
                console.warn("Element " + e.scrollToElement + " not found");
              }

              e.scrollToElement = null;
            } else {
              e.scrollTo(0);
            }
          }
        };

        var i = {
          doScrollingRightAway: false,
          animateScroll: true,
          scrollFriction: .3,
          scrollAcceleration: .04
        };
        n.options = o({}, i, t);
        return n;
      }

      i(e, [{
        key: "mount",
        value: function t() {
          var e = this;
          var n = this.swup;
          n._handlers.scrollDone = [];
          n._handlers.scrollStart = [];
          this.scrl = new s["default"]({
            onStart: function t() {
              return n.triggerEvent("scrollStart");
            },
            onEnd: function t() {
              return n.triggerEvent("scrollDone");
            },
            onCancel: function t() {
              return n.triggerEvent("scrollDone");
            },
            friction: this.options.scrollFriction,
            acceleration: this.options.scrollAcceleration
          });

          n.scrollTo = function (t) {
            if (e.options.animateScroll) {
              e.scrl.scrollTo(t);
            } else {
              n.triggerEvent("scrollStart");
              window.scrollTo(0, t);
              n.triggerEvent("scrollDone");
            }
          };

          if (n.options.animateHistoryBrowsing) {
            window.history.scrollRestoration = "manual";
          }

          n.on("samePage", this.onSamePage);
          n.on("samePageWithHash", this.onSamePageWithHash);
          n.on("transitionStart", this.onTransitionStart);
          n.on("contentReplaced", this.onContentReplaced);
        }
      }, {
        key: "unmount",
        value: function t() {
          this.swup.scrollTo = null;
          delete this.scrl;
          this.scrl = null;
          this.swup.off("samePage", this.onSamePage);
          this.swup.off("samePageWithHash", this.onSamePageWithHash);
          this.swup.off("transitionStart", this.onTransitionStart);
          this.swup.off("contentReplaced", this.onContentReplaced);
          this.swup._handlers.scrollDone = null;
          this.swup._handlers.scrollStart = null;
          window.history.scrollRestoration = "auto";
        }
      }]);
      return e;
    }(l["default"]);

    e["default"] = d;
  }, function (t, e, n) {
    "use strict";

    Object.defineProperty(e, "__esModule", {
      value: true
    });

    var o = function () {
      function t(t, e) {
        for (var n = 0; n < e.length; n++) {
          var o = e[n];
          o.enumerable = o.enumerable || false;
          o.configurable = true;
          if ("value" in o) o.writable = true;
          Object.defineProperty(t, o.key, o);
        }
      }

      return function (e, n, o) {
        if (n) t(e.prototype, n);
        if (o) t(e, o);
        return e;
      };
    }();

    function i(t, e) {
      if (!(t instanceof e)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var r = function () {
      function t() {
        i(this, t);
        this.isSwupPlugin = true;
      }

      o(t, [{
        key: "mount",
        value: function t() {}
      }, {
        key: "unmount",
        value: function t() {}
      }]);
      return t;
    }();

    e["default"] = r;
  }, function (t, e, n) {
    "use strict";

    Object.defineProperty(e, "__esModule", {
      value: true
    });

    var o = Object.assign || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];

        for (var o in n) {
          if (Object.prototype.hasOwnProperty.call(n, o)) {
            t[o] = n[o];
          }
        }
      }

      return t;
    };

    function i(t, e) {
      if (!(t instanceof e)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var r = function t(e) {
      var n = this;
      i(this, t);
      this._raf = null;
      this._positionY = 0;
      this._velocityY = 0;
      this._targetPositionY = 0;
      this._targetPositionYWithOffset = 0;
      this._direction = 0;

      this.scrollTo = function (t) {
        if (t && t.nodeType) {
          n._targetPositionY = Math.round(t.getBoundingClientRect().top + window.pageYOffset);
        } else if (parseInt(n._targetPositionY) === n._targetPositionY) {
          n._targetPositionY = Math.round(t);
        } else {
          console.error("Argument must be a number or an element.");
          return;
        }

        if (n._targetPositionY > document.documentElement.scrollHeight - window.innerHeight) {
          n._targetPositionY = document.documentElement.scrollHeight - window.innerHeight;
        }

        n._positionY = document.body.scrollTop || document.documentElement.scrollTop;
        n._direction = n._positionY > n._targetPositionY ? -1 : 1;
        n._targetPositionYWithOffset = n._targetPositionY + n._direction;
        n._velocityY = 0;

        if (n._positionY !== n._targetPositionY) {
          n.options.onStart();

          n._animate();
        } else {
          n.options.onAlreadyAtPositions();
        }
      };

      this._animate = function () {
        var t = n._update();

        n._render();

        if (n._direction === 1 && n._targetPositionY > n._positionY || n._direction === -1 && n._targetPositionY < n._positionY) {
          n._raf = requestAnimationFrame(n._animate);
          n.options.onTick();
        } else {
          n._positionY = n._targetPositionY;

          n._render();

          n._raf = null;
          n.options.onTick();
          n.options.onEnd();
        }
      };

      this._update = function () {
        var t = n._targetPositionYWithOffset - n._positionY;
        var e = t * n.options.acceleration;
        n._velocityY += e;
        n._velocityY *= n.options.friction;
        n._positionY += n._velocityY;
        return Math.abs(t);
      };

      this._render = function () {
        window.scrollTo(0, n._positionY);
      };

      var r = {
        onAlreadyAtPositions: function t() {},
        onCancel: function t() {},
        onEnd: function t() {},
        onStart: function t() {},
        onTick: function t() {},
        friction: .7,
        acceleration: .04
      };
      this.options = o({}, r, e);

      if (e && e.friction) {
        this.options.friction = 1 - e.friction;
      }

      window.addEventListener("mousewheel", function (t) {
        if (n._raf) {
          n.options.onCancel();
          cancelAnimationFrame(n._raf);
          n._raf = null;
        }
      }, {
        passive: true
      });
    };

    e["default"] = r;
  }]);
});
//# sourceMappingURL=SwupScrollPlugin.min.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3dXAvU3d1cFNjcm9sbFBsdWdpbi5taW4uanMiXSwibmFtZXMiOlsidCIsImUiLCJuIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIm8iLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIl9fZXNNb2R1bGUiLCJjcmVhdGUiLCJiaW5kIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFzc2lnbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5IiwidSIsImEiLCJUeXBlRXJyb3IiLCJmIiwiUmVmZXJlbmNlRXJyb3IiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJuYW1lIiwib25TYW1lUGFnZSIsInN3dXAiLCJzY3JvbGxUbyIsIm9uU2FtZVBhZ2VXaXRoSGFzaCIsImRlbGVnYXRlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaGFzaCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsInBhZ2VZT2Zmc2V0Iiwib25UcmFuc2l0aW9uU3RhcnQiLCJvcHRpb25zIiwiZG9TY3JvbGxpbmdSaWdodEF3YXkiLCJzY3JvbGxUb0VsZW1lbnQiLCJkb1Njcm9sbGluZyIsIm9uQ29udGVudFJlcGxhY2VkIiwiYW5pbWF0ZUhpc3RvcnlCcm93c2luZyIsImNvbnNvbGUiLCJ3YXJuIiwiYW5pbWF0ZVNjcm9sbCIsInNjcm9sbEZyaWN0aW9uIiwic2Nyb2xsQWNjZWxlcmF0aW9uIiwiX2hhbmRsZXJzIiwic2Nyb2xsRG9uZSIsInNjcm9sbFN0YXJ0Iiwic2NybCIsIm9uU3RhcnQiLCJ0cmlnZ2VyRXZlbnQiLCJvbkVuZCIsIm9uQ2FuY2VsIiwiZnJpY3Rpb24iLCJhY2NlbGVyYXRpb24iLCJoaXN0b3J5Iiwic2Nyb2xsUmVzdG9yYXRpb24iLCJvbiIsIm9mZiIsImlzU3d1cFBsdWdpbiIsIl9yYWYiLCJfcG9zaXRpb25ZIiwiX3ZlbG9jaXR5WSIsIl90YXJnZXRQb3NpdGlvblkiLCJfdGFyZ2V0UG9zaXRpb25ZV2l0aE9mZnNldCIsIl9kaXJlY3Rpb24iLCJub2RlVHlwZSIsIk1hdGgiLCJyb3VuZCIsInBhcnNlSW50IiwiZXJyb3IiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxIZWlnaHQiLCJpbm5lckhlaWdodCIsImJvZHkiLCJzY3JvbGxUb3AiLCJfYW5pbWF0ZSIsIm9uQWxyZWFkeUF0UG9zaXRpb25zIiwiX3VwZGF0ZSIsIl9yZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvblRpY2siLCJhYnMiLCJhZGRFdmVudExpc3RlbmVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwYXNzaXZlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsQ0FBQyxTQUFTQSxDQUFULENBQVdDLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsTUFBRyxRQUFPQyxPQUFQLHlDQUFPQSxPQUFQLE9BQWlCLFFBQWpCLElBQTJCLFFBQU9DLE1BQVAseUNBQU9BLE1BQVAsT0FBZ0IsUUFBOUMsRUFBdURBLE1BQU0sQ0FBQ0QsT0FBUCxHQUFlRCxDQUFDLEVBQWhCLENBQXZELEtBQStFLElBQUcsT0FBT0csTUFBUCxLQUFnQixVQUFoQixJQUE0QkEsTUFBTSxDQUFDQyxHQUF0QyxFQUEwQ0QsTUFBTSxDQUFDLEVBQUQsRUFBSUgsQ0FBSixDQUFOLENBQTFDLEtBQTRELElBQUcsUUFBT0MsT0FBUCx5Q0FBT0EsT0FBUCxPQUFpQixRQUFwQixFQUE2QkEsT0FBTyxDQUFDLGtCQUFELENBQVAsR0FBNEJELENBQUMsRUFBN0IsQ0FBN0IsS0FBa0VELENBQUMsQ0FBQyxrQkFBRCxDQUFELEdBQXNCQyxDQUFDLEVBQXZCO0FBQTBCLENBQXhQLEVBQTBQSyxN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MkUsUUFBQUEsS0FBSyxFQUFDLFNBQVMzRSxDQUFULEdBQVksQ0FBRSxDQUFqRjtBQUFrRnlFLFFBQUFBLE9BQU8sRUFBQyxTQUFTekUsQ0FBVCxHQUFZLENBQUUsQ0FBeEc7QUFBeUd5RyxRQUFBQSxNQUFNLEVBQUMsU0FBU3pHLENBQVQsR0FBWSxDQUFFLENBQTlIO0FBQStINkUsUUFBQUEsUUFBUSxFQUFDLEVBQXhJO0FBQTJJQyxRQUFBQSxZQUFZLEVBQUM7QUFBeEosT0FBTjtBQUFtSyxXQUFLcEIsT0FBTCxHQUFhbEQsQ0FBQyxDQUFDLEVBQUQsRUFBSVcsQ0FBSixFQUFNbEIsQ0FBTixDQUFkOztBQUF1QixVQUFHQSxDQUFDLElBQUVBLENBQUMsQ0FBQzRFLFFBQVIsRUFBaUI7QUFBQyxhQUFLbkIsT0FBTCxDQUFhbUIsUUFBYixHQUFzQixJQUFFNUUsQ0FBQyxDQUFDNEUsUUFBMUI7QUFBbUM7O0FBQUF0RSxNQUFBQSxNQUFNLENBQUNvRyxnQkFBUCxDQUF3QixZQUF4QixFQUFxQyxVQUFTM0csQ0FBVCxFQUFXO0FBQUMsWUFBR0UsQ0FBQyxDQUFDa0YsSUFBTCxFQUFVO0FBQUNsRixVQUFBQSxDQUFDLENBQUN3RCxPQUFGLENBQVVrQixRQUFWO0FBQXFCZ0MsVUFBQUEsb0JBQW9CLENBQUMxRyxDQUFDLENBQUNrRixJQUFILENBQXBCO0FBQTZCbEYsVUFBQUEsQ0FBQyxDQUFDa0YsSUFBRixHQUFPLElBQVA7QUFBWTtBQUFDLE9BQTNILEVBQTRIO0FBQUN5QixRQUFBQSxPQUFPLEVBQUM7QUFBVCxPQUE1SDtBQUE0SSxLQUFwMUQ7O0FBQXExRDVHLElBQUFBLENBQUMsV0FBRCxHQUFVa0IsQ0FBVjtBQUFZLEdBQS96TSxDQUFsN0IsQ0FBUDtBQUEydk8sQ0FBdmdQIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHQoZSxuKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGU9PT1cIm9iamVjdFwiKW1vZHVsZS5leHBvcnRzPW4oKTtlbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpZGVmaW5lKFtdLG4pO2Vsc2UgaWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiKWV4cG9ydHNbXCJTd3VwU2Nyb2xsUGx1Z2luXCJdPW4oKTtlbHNlIGVbXCJTd3VwU2Nyb2xsUGx1Z2luXCJdPW4oKX0pKHdpbmRvdyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBuKG8pe2lmKGVbb10pe3JldHVybiBlW29dLmV4cG9ydHN9dmFyIGk9ZVtvXT17aTpvLGw6ZmFsc2UsZXhwb3J0czp7fX07dFtvXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKTtpLmw9dHJ1ZTtyZXR1cm4gaS5leHBvcnRzfW4ubT10O24uYz1lO24uZD1mdW5jdGlvbih0LGUsbyl7aWYoIW4ubyh0LGUpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOnRydWUsZ2V0Om99KX19O24ucj1mdW5jdGlvbih0KXtpZih0eXBlb2YgU3ltYm9sIT09XCJ1bmRlZmluZWRcIiYmU3ltYm9sLnRvU3RyaW5nVGFnKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pfTtuLnQ9ZnVuY3Rpb24odCxlKXtpZihlJjEpdD1uKHQpO2lmKGUmOClyZXR1cm4gdDtpZihlJjQmJnR5cGVvZiB0PT09XCJvYmplY3RcIiYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBvPU9iamVjdC5jcmVhdGUobnVsbCk7bi5yKG8pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOnRydWUsdmFsdWU6dH0pO2lmKGUmMiYmdHlwZW9mIHQhPVwic3RyaW5nXCIpZm9yKHZhciBpIGluIHQpbi5kKG8saSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLGkpKTtyZXR1cm4gb307bi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbiBlKCl7cmV0dXJuIHRbXCJkZWZhdWx0XCJdfTpmdW5jdGlvbiBlKCl7cmV0dXJuIHR9O24uZChlLFwiYVwiLGUpO3JldHVybiBlfTtuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9O24ucD1cIlwiO3JldHVybiBuKG4ucz0wKX0oW2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDEpO3ZhciBpPXIobyk7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19dC5leHBvcnRzPWkuZGVmYXVsdH0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIG89T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIG49YXJndW1lbnRzW2VdO2Zvcih2YXIgbyBpbiBuKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSl7dFtvXT1uW29dfX19cmV0dXJuIHR9O3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fGZhbHNlO28uY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gbylvLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbihlLG4sbyl7aWYobil0KGUucHJvdG90eXBlLG4pO2lmKG8pdChlLG8pO3JldHVybiBlfX0oKTt2YXIgcj1uKDIpO3ZhciBsPXUocik7dmFyIGE9bigzKTt2YXIgcz11KGEpO2Z1bmN0aW9uIHUodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIGModCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX19ZnVuY3Rpb24gZih0LGUpe2lmKCF0KXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIil9cmV0dXJuIGUmJih0eXBlb2YgZT09PVwib2JqZWN0XCJ8fHR5cGVvZiBlPT09XCJmdW5jdGlvblwiKT9lOnR9ZnVuY3Rpb24gcCh0LGUpe2lmKHR5cGVvZiBlIT09XCJmdW5jdGlvblwiJiZlIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIGUpfXQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihlKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lfXZhciBkPWZ1bmN0aW9uKHQpe3AoZSx0KTtmdW5jdGlvbiBlKHQpe2ModGhpcyxlKTt2YXIgbj1mKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcykpO24ubmFtZT1cIlNjcm9sbFBsdWdpblwiO24ub25TYW1lUGFnZT1mdW5jdGlvbigpe24uc3d1cC5zY3JvbGxUbygwKX07bi5vblNhbWVQYWdlV2l0aEhhc2g9ZnVuY3Rpb24odCl7dmFyIGU9dC5kZWxlZ2F0ZVRhcmdldDt2YXIgbz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUuaGFzaCk7dmFyIGk9by5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3Ard2luZG93LnBhZ2VZT2Zmc2V0O24uc3d1cC5zY3JvbGxUbyhpKX07bi5vblRyYW5zaXRpb25TdGFydD1mdW5jdGlvbih0KXtpZihuLm9wdGlvbnMuZG9TY3JvbGxpbmdSaWdodEF3YXkmJiFuLnN3dXAuc2Nyb2xsVG9FbGVtZW50KXtuLmRvU2Nyb2xsaW5nKHQpfX07bi5vbkNvbnRlbnRSZXBsYWNlZD1mdW5jdGlvbih0KXtpZighbi5vcHRpb25zLmRvU2Nyb2xsaW5nUmlnaHRBd2F5fHxuLnN3dXAuc2Nyb2xsVG9FbGVtZW50KXtuLmRvU2Nyb2xsaW5nKHQpfX07bi5kb1Njcm9sbGluZz1mdW5jdGlvbih0KXt2YXIgZT1uLnN3dXA7aWYoIXR8fGUub3B0aW9ucy5hbmltYXRlSGlzdG9yeUJyb3dzaW5nKXtpZihlLnNjcm9sbFRvRWxlbWVudCE9bnVsbCl7dmFyIG89ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlLnNjcm9sbFRvRWxlbWVudCk7aWYobyE9bnVsbCl7dmFyIGk9by5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3Ard2luZG93LnBhZ2VZT2Zmc2V0O2Uuc2Nyb2xsVG8oaSl9ZWxzZXtjb25zb2xlLndhcm4oXCJFbGVtZW50IFwiK2Uuc2Nyb2xsVG9FbGVtZW50K1wiIG5vdCBmb3VuZFwiKX1lLnNjcm9sbFRvRWxlbWVudD1udWxsfWVsc2V7ZS5zY3JvbGxUbygwKX19fTt2YXIgaT17ZG9TY3JvbGxpbmdSaWdodEF3YXk6ZmFsc2UsYW5pbWF0ZVNjcm9sbDp0cnVlLHNjcm9sbEZyaWN0aW9uOi4zLHNjcm9sbEFjY2VsZXJhdGlvbjouMDR9O24ub3B0aW9ucz1vKHt9LGksdCk7cmV0dXJuIG59aShlLFt7a2V5OlwibW91bnRcIix2YWx1ZTpmdW5jdGlvbiB0KCl7dmFyIGU9dGhpczt2YXIgbj10aGlzLnN3dXA7bi5faGFuZGxlcnMuc2Nyb2xsRG9uZT1bXTtuLl9oYW5kbGVycy5zY3JvbGxTdGFydD1bXTt0aGlzLnNjcmw9bmV3IHMuZGVmYXVsdCh7b25TdGFydDpmdW5jdGlvbiB0KCl7cmV0dXJuIG4udHJpZ2dlckV2ZW50KFwic2Nyb2xsU3RhcnRcIil9LG9uRW5kOmZ1bmN0aW9uIHQoKXtyZXR1cm4gbi50cmlnZ2VyRXZlbnQoXCJzY3JvbGxEb25lXCIpfSxvbkNhbmNlbDpmdW5jdGlvbiB0KCl7cmV0dXJuIG4udHJpZ2dlckV2ZW50KFwic2Nyb2xsRG9uZVwiKX0sZnJpY3Rpb246dGhpcy5vcHRpb25zLnNjcm9sbEZyaWN0aW9uLGFjY2VsZXJhdGlvbjp0aGlzLm9wdGlvbnMuc2Nyb2xsQWNjZWxlcmF0aW9ufSk7bi5zY3JvbGxUbz1mdW5jdGlvbih0KXtpZihlLm9wdGlvbnMuYW5pbWF0ZVNjcm9sbCl7ZS5zY3JsLnNjcm9sbFRvKHQpfWVsc2V7bi50cmlnZ2VyRXZlbnQoXCJzY3JvbGxTdGFydFwiKTt3aW5kb3cuc2Nyb2xsVG8oMCx0KTtuLnRyaWdnZXJFdmVudChcInNjcm9sbERvbmVcIil9fTtpZihuLm9wdGlvbnMuYW5pbWF0ZUhpc3RvcnlCcm93c2luZyl7d2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb249XCJtYW51YWxcIn1uLm9uKFwic2FtZVBhZ2VcIix0aGlzLm9uU2FtZVBhZ2UpO24ub24oXCJzYW1lUGFnZVdpdGhIYXNoXCIsdGhpcy5vblNhbWVQYWdlV2l0aEhhc2gpO24ub24oXCJ0cmFuc2l0aW9uU3RhcnRcIix0aGlzLm9uVHJhbnNpdGlvblN0YXJ0KTtuLm9uKFwiY29udGVudFJlcGxhY2VkXCIsdGhpcy5vbkNvbnRlbnRSZXBsYWNlZCl9fSx7a2V5OlwidW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uIHQoKXt0aGlzLnN3dXAuc2Nyb2xsVG89bnVsbDtkZWxldGUgdGhpcy5zY3JsO3RoaXMuc2NybD1udWxsO3RoaXMuc3d1cC5vZmYoXCJzYW1lUGFnZVwiLHRoaXMub25TYW1lUGFnZSk7dGhpcy5zd3VwLm9mZihcInNhbWVQYWdlV2l0aEhhc2hcIix0aGlzLm9uU2FtZVBhZ2VXaXRoSGFzaCk7dGhpcy5zd3VwLm9mZihcInRyYW5zaXRpb25TdGFydFwiLHRoaXMub25UcmFuc2l0aW9uU3RhcnQpO3RoaXMuc3d1cC5vZmYoXCJjb250ZW50UmVwbGFjZWRcIix0aGlzLm9uQ29udGVudFJlcGxhY2VkKTt0aGlzLnN3dXAuX2hhbmRsZXJzLnNjcm9sbERvbmU9bnVsbDt0aGlzLnN3dXAuX2hhbmRsZXJzLnNjcm9sbFN0YXJ0PW51bGw7d2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb249XCJhdXRvXCJ9fV0pO3JldHVybiBlfShsLmRlZmF1bHQpO2UuZGVmYXVsdD1kfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHxmYWxzZTtvLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIG8pby53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24oZSxuLG8pe2lmKG4pdChlLnByb3RvdHlwZSxuKTtpZihvKXQoZSxvKTtyZXR1cm4gZX19KCk7ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX12YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpKHRoaXMsdCk7dGhpcy5pc1N3dXBQbHVnaW49dHJ1ZX1vKHQsW3trZXk6XCJtb3VudFwiLHZhbHVlOmZ1bmN0aW9uIHQoKXt9fSx7a2V5OlwidW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uIHQoKXt9fV0pO3JldHVybiB0fSgpO2UuZGVmYXVsdD1yfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgbz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgbj1hcmd1bWVudHNbZV07Zm9yKHZhciBvIGluIG4pe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLG8pKXt0W29dPW5bb119fX1yZXR1cm4gdH07ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX12YXIgcj1mdW5jdGlvbiB0KGUpe3ZhciBuPXRoaXM7aSh0aGlzLHQpO3RoaXMuX3JhZj1udWxsO3RoaXMuX3Bvc2l0aW9uWT0wO3RoaXMuX3ZlbG9jaXR5WT0wO3RoaXMuX3RhcmdldFBvc2l0aW9uWT0wO3RoaXMuX3RhcmdldFBvc2l0aW9uWVdpdGhPZmZzZXQ9MDt0aGlzLl9kaXJlY3Rpb249MDt0aGlzLnNjcm9sbFRvPWZ1bmN0aW9uKHQpe2lmKHQmJnQubm9kZVR5cGUpe24uX3RhcmdldFBvc2l0aW9uWT1NYXRoLnJvdW5kKHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wK3dpbmRvdy5wYWdlWU9mZnNldCl9ZWxzZSBpZihwYXJzZUludChuLl90YXJnZXRQb3NpdGlvblkpPT09bi5fdGFyZ2V0UG9zaXRpb25ZKXtuLl90YXJnZXRQb3NpdGlvblk9TWF0aC5yb3VuZCh0KX1lbHNle2NvbnNvbGUuZXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyIG9yIGFuIGVsZW1lbnQuXCIpO3JldHVybn1pZihuLl90YXJnZXRQb3NpdGlvblk+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodC13aW5kb3cuaW5uZXJIZWlnaHQpe24uX3RhcmdldFBvc2l0aW9uWT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0LXdpbmRvdy5pbm5lckhlaWdodH1uLl9wb3NpdGlvblk9ZG9jdW1lbnQuYm9keS5zY3JvbGxUb3B8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7bi5fZGlyZWN0aW9uPW4uX3Bvc2l0aW9uWT5uLl90YXJnZXRQb3NpdGlvblk/LTE6MTtuLl90YXJnZXRQb3NpdGlvbllXaXRoT2Zmc2V0PW4uX3RhcmdldFBvc2l0aW9uWStuLl9kaXJlY3Rpb247bi5fdmVsb2NpdHlZPTA7aWYobi5fcG9zaXRpb25ZIT09bi5fdGFyZ2V0UG9zaXRpb25ZKXtuLm9wdGlvbnMub25TdGFydCgpO24uX2FuaW1hdGUoKX1lbHNle24ub3B0aW9ucy5vbkFscmVhZHlBdFBvc2l0aW9ucygpfX07dGhpcy5fYW5pbWF0ZT1mdW5jdGlvbigpe3ZhciB0PW4uX3VwZGF0ZSgpO24uX3JlbmRlcigpO2lmKG4uX2RpcmVjdGlvbj09PTEmJm4uX3RhcmdldFBvc2l0aW9uWT5uLl9wb3NpdGlvbll8fG4uX2RpcmVjdGlvbj09PS0xJiZuLl90YXJnZXRQb3NpdGlvblk8bi5fcG9zaXRpb25ZKXtuLl9yYWY9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKG4uX2FuaW1hdGUpO24ub3B0aW9ucy5vblRpY2soKX1lbHNle24uX3Bvc2l0aW9uWT1uLl90YXJnZXRQb3NpdGlvblk7bi5fcmVuZGVyKCk7bi5fcmFmPW51bGw7bi5vcHRpb25zLm9uVGljaygpO24ub3B0aW9ucy5vbkVuZCgpfX07dGhpcy5fdXBkYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9bi5fdGFyZ2V0UG9zaXRpb25ZV2l0aE9mZnNldC1uLl9wb3NpdGlvblk7dmFyIGU9dCpuLm9wdGlvbnMuYWNjZWxlcmF0aW9uO24uX3ZlbG9jaXR5WSs9ZTtuLl92ZWxvY2l0eVkqPW4ub3B0aW9ucy5mcmljdGlvbjtuLl9wb3NpdGlvblkrPW4uX3ZlbG9jaXR5WTtyZXR1cm4gTWF0aC5hYnModCl9O3RoaXMuX3JlbmRlcj1mdW5jdGlvbigpe3dpbmRvdy5zY3JvbGxUbygwLG4uX3Bvc2l0aW9uWSl9O3ZhciByPXtvbkFscmVhZHlBdFBvc2l0aW9uczpmdW5jdGlvbiB0KCl7fSxvbkNhbmNlbDpmdW5jdGlvbiB0KCl7fSxvbkVuZDpmdW5jdGlvbiB0KCl7fSxvblN0YXJ0OmZ1bmN0aW9uIHQoKXt9LG9uVGljazpmdW5jdGlvbiB0KCl7fSxmcmljdGlvbjouNyxhY2NlbGVyYXRpb246LjA0fTt0aGlzLm9wdGlvbnM9byh7fSxyLGUpO2lmKGUmJmUuZnJpY3Rpb24pe3RoaXMub3B0aW9ucy5mcmljdGlvbj0xLWUuZnJpY3Rpb259d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsZnVuY3Rpb24odCl7aWYobi5fcmFmKXtuLm9wdGlvbnMub25DYW5jZWwoKTtjYW5jZWxBbmltYXRpb25GcmFtZShuLl9yYWYpO24uX3JhZj1udWxsfX0se3Bhc3NpdmU6dHJ1ZX0pfTtlLmRlZmF1bHQ9cn1dKX0pOyJdLCJmaWxlIjoiU3d1cFNjcm9sbFBsdWdpbi5taW4uanMifQ==
