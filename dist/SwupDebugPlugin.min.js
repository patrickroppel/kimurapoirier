"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function e(t, n) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && (typeof module === "undefined" ? "undefined" : _typeof(module)) === "object") module.exports = n();else if (typeof define === "function" && define.amd) define([], n);else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") exports["SwupDebugPlugin"] = n();else t["SwupDebugPlugin"] = n();
})(window, function () {
  return function (e) {
    var t = {};

    function n(r) {
      if (t[r]) {
        return t[r].exports;
      }

      var o = t[r] = {
        i: r,
        l: false,
        exports: {}
      };
      e[r].call(o.exports, o, o.exports, n);
      o.l = true;
      return o.exports;
    }

    n.m = e;
    n.c = t;

    n.d = function (e, t, r) {
      if (!n.o(e, t)) {
        Object.defineProperty(e, t, {
          enumerable: true,
          get: r
        });
      }
    };

    n.r = function (e) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(e, Symbol.toStringTag, {
          value: "Module"
        });
      }

      Object.defineProperty(e, "__esModule", {
        value: true
      });
    };

    n.t = function (e, t) {
      if (t & 1) e = n(e);
      if (t & 8) return e;
      if (t & 4 && _typeof(e) === "object" && e && e.__esModule) return e;
      var r = Object.create(null);
      n.r(r);
      Object.defineProperty(r, "default", {
        enumerable: true,
        value: e
      });
      if (t & 2 && typeof e != "string") for (var o in e) {
        n.d(r, o, function (t) {
          return e[t];
        }.bind(null, o));
      }
      return r;
    };

    n.n = function (e) {
      var t = e && e.__esModule ? function t() {
        return e["default"];
      } : function t() {
        return e;
      };
      n.d(t, "a", t);
      return t;
    };

    n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    };

    n.p = "";
    return n(n.s = 0);
  }([function (e, t, n) {
    "use strict";

    var r = n(1);
    var o = u(r);

    function u(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }

    e.exports = o["default"];
  }, function (e, t, n) {
    "use strict";

    Object.defineProperty(t, "__esModule", {
      value: true
    });

    var r = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || false;
          r.configurable = true;
          if ("value" in r) r.writable = true;
          Object.defineProperty(e, r.key, r);
        }
      }

      return function (t, n, r) {
        if (n) e(t.prototype, n);
        if (r) e(t, r);
        return t;
      };
    }();

    var o = n(2);
    var u = i(o);

    function i(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }

    function l(e, t) {
      if (!(e instanceof t)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function f(e, t) {
      if (!e) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return t && (_typeof(t) === "object" || typeof t === "function") ? t : e;
    }

    function c(e, t) {
      if (typeof t !== "function" && t !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + _typeof(t));
      }

      e.prototype = Object.create(t && t.prototype, {
        constructor: {
          value: e,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (t) Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t;
    }

    var a = function (e) {
      c(t, e);

      function t() {
        l(this, t);
        var e = f(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
        e.name = "DebugPlugin";

        e.triggerEvent = function (t, n) {
          if (n) {
            console.groupCollapsed("%cswup:" + "%c" + t, "color: #343434", "color: #009ACD");
            console.log(n);
            console.groupEnd();
          } else {
            console.log("%cswup:" + "%c" + t, "color: #343434", "color: #009ACD");
          }

          e.swup._triggerEvent(t, n);
        };

        e.log = function (e, t) {
          if (t) {
            console.groupCollapsed(e);

            for (var n in t) {
              console.log(t[n]);
            }

            console.groupEnd();
          } else {
            console.log(e + "%c", "color: #009ACD");
          }
        };

        e.debugLog = function (e, t) {
          if (t === "error") {
            console.error("DEBUG PLUGIN: " + e);
          } else {
            console.warn("DEBUG PLUGIN: " + e);
          }
        };

        if (!document.getElementsByTagName("title").length) {
          var n = "This page doesn't have title tag. Title tag is required in every page.";
          console.warn("DEBUG PLUGIN: " + n);
        }

        return e;
      }

      r(t, [{
        key: "mount",
        value: function e() {
          var t = this.swup;
          t.log = this.log;
          window.swup = t;
          t._triggerEvent = t.triggerEvent;
          t.triggerEvent = this.triggerEvent;
          var n = 'a[href]:not([href^="' + window.location.origin + '"]):not([href^="/"]):not([href^="http"]):not([href^="/"]):not([href^="?"]):not([href^="#"])';
          t.on("pageView", function () {
            if (document.querySelectorAll(n).length) {
              var e = 'It seems there are some links with a href attribute not starting with "#", "/" or current domain, which is potentially a problem.';
              console.warn("DEBUG PLUGIN: " + e, document.querySelectorAll(n));
            }

            if (document.querySelectorAll(n).length) {
              var t = 'It seems there are some links with a href attribute not starting with "#", "/" or current domain, which is potentially a problem.';
              console.warn("DEBUG PLUGIN: " + t, document.querySelectorAll(n));
            }
          });
        }
      }, {
        key: "unmount",
        value: function e() {
          this.swup.log = function () {};

          this.swup.triggerEvent = this.swup._triggerEvent;
        }
      }]);
      return t;
    }(u["default"]);

    t["default"] = a;
  }, function (e, t, n) {
    "use strict";

    Object.defineProperty(t, "__esModule", {
      value: true
    });

    var r = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || false;
          r.configurable = true;
          if ("value" in r) r.writable = true;
          Object.defineProperty(e, r.key, r);
        }
      }

      return function (t, n, r) {
        if (n) e(t.prototype, n);
        if (r) e(t, r);
        return t;
      };
    }();

    function o(e, t) {
      if (!(e instanceof t)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var u = function () {
      function e() {
        o(this, e);
        this.isSwupPlugin = true;
      }

      r(e, [{
        key: "mount",
        value: function e() {}
      }, {
        key: "unmount",
        value: function e() {}
      }]);
      return e;
    }();

    t["default"] = u;
  }]);
});
//# sourceMappingURL=SwupDebugPlugin.min.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
